{"version":3,"file":"bib-avis.js","sources":["../node_modules/@lit/task/development/task.js","../node_modules/lit-html/development/directive.js","../node_modules/lit-html/development/directives/unsafe-html.js","../node_modules/idb/build/index.js","../src/components/bib-avis/bib-avis.js","../src/icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { notEqual } from '@lit/reactive-element';\n/**\n * States for task status\n */\nexport const TaskStatus = {\n    INITIAL: 0,\n    PENDING: 1,\n    COMPLETE: 2,\n    ERROR: 3,\n};\n/**\n * A special value that can be returned from task functions to reset the task\n * status to INITIAL.\n */\nexport const initialState = Symbol();\n// TODO(sorvell / justinfagnani): Some issues:\n// 1. With the task triggered in `update`, there is no ReactiveElement\n// change-in-update warning in the common case that the update itself does not change\n// the deps; however, Task's `requestUpdate` call to render pending state  will not\n// trigger another update since the element is updating. This `requestUpdate`\n// could be triggered in updated, but that results a change-in-update warning.\n// 2. There is no good signal for when the task has resolved and rendered other\n// than requestAnimationFrame. The user would need to store a promise for the\n// task and then wait for that and the element to update. (Update just justinfagnani:\n// Why isn't waiting taskComplete and updateComplete sufficient? This comment is\n// from before taskComplete existed!)\n/**\n * A controller that performs an asynchronous task (like a fetch) when its\n * host element updates.\n *\n * Task requests an update on the host element when the task starts and\n * completes so that the host can render the task status, value, and error as\n * the task runs.\n *\n * The task function must be supplied and can take a list of arguments. The\n * arguments are given to the Task as a function that returns a list of values,\n * which is run and checked for changes on every host update.\n *\n * The `value` property reports the completed value, and the `error` property\n * an error state if one occurs. The `status` property can be checked for\n * status and is of type `TaskStatus` which has states for initial, pending,\n * complete, and error.\n *\n * The `render` method accepts an object with optional methods corresponding\n * to the task statuses to easily render different templates for each task\n * status.\n *\n * The task is run automatically when its arguments change; however, this can\n * be customized by setting `autoRun` to false and calling `run` explicitly\n * to run the task.\n *\n * For a task to see state changes in the current update pass of the host\n * element, those changes must be made in `willUpdate()`. State changes in\n * `update()` or `updated()` will not be visible to the task until the next\n * update pass.\n *\n * @example\n *\n * ```ts\n * class MyElement extends LitElement {\n *   url = 'example.com/api';\n *   id = 0;\n *\n *   task = new Task(\n *     this,\n *     {\n *       task: async ([url, id]) => {\n *         const response = await fetch(`${this.url}?id=${this.id}`);\n *         if (!response.ok) {\n *           throw new Error(response.statusText);\n *         }\n *         return response.json();\n *       },\n *       args: () => [this.id, this.url],\n *     }\n *   );\n *\n *   render() {\n *     return this.task.render({\n *       pending: () => html`<p>Loading...</p>`,\n *       complete: (value) => html`<p>Result: ${value}</p>`\n *     });\n *   }\n * }\n * ```\n */\nexport class Task {\n    /**\n     * A Promise that resolve when the current task run is complete.\n     *\n     * If a new task run is started while a previous run is pending, the Promise\n     * is kept and only resolved when the new run is completed.\n     */\n    get taskComplete() {\n        // If a task run exists, return the cached promise. This is true in the case\n        // where the user has called taskComplete in pending or completed state\n        // before and has not started a new task run since.\n        if (this._taskComplete) {\n            return this._taskComplete;\n        }\n        // Generate an in-progress promise if the the status is pending and has been\n        // cleared by .run().\n        if (this.status === TaskStatus.PENDING) {\n            this._taskComplete = new Promise((res, rej) => {\n                this._resolveTaskComplete = res;\n                this._rejectTaskComplete = rej;\n            });\n            // If the status is error, return a rejected promise.\n        }\n        else if (this.status === TaskStatus.ERROR) {\n            this._taskComplete = Promise.reject(this._error);\n            // Otherwise we are at a task run's completion or this is the first\n            // request and we are not in the middle of a task (i.e. INITIAL).\n        }\n        else {\n            this._taskComplete = Promise.resolve(this._value);\n        }\n        return this._taskComplete;\n    }\n    constructor(host, task, args) {\n        this._callId = 0;\n        this.status = TaskStatus.INITIAL;\n        (this._host = host).addController(this);\n        const taskConfig = typeof task === 'object' ? task : { task, args };\n        this._task = taskConfig.task;\n        this._argsFn = taskConfig.args;\n        this._argsEqual = taskConfig.argsEqual ?? shallowArrayEquals;\n        this._onComplete = taskConfig.onComplete;\n        this._onError = taskConfig.onError;\n        this.autoRun = taskConfig.autoRun ?? true;\n        // Providing initialValue puts the task in COMPLETE state and stores the\n        // args immediately so it only runs when they change again.\n        if ('initialValue' in taskConfig) {\n            this._value = taskConfig.initialValue;\n            this.status = TaskStatus.COMPLETE;\n            this._previousArgs = this._getArgs?.();\n        }\n    }\n    hostUpdate() {\n        if (this.autoRun === true) {\n            this._performTask();\n        }\n    }\n    hostUpdated() {\n        if (this.autoRun === 'afterUpdate') {\n            this._performTask();\n        }\n    }\n    _getArgs() {\n        if (this._argsFn === undefined) {\n            return undefined;\n        }\n        const args = this._argsFn();\n        if (!Array.isArray(args)) {\n            throw new Error('The args function must return an array');\n        }\n        return args;\n    }\n    /**\n     * Determines if the task should run when it's triggered because of a\n     * host update, and runs the task if it should.\n     *\n     * A task should run when its arguments change from the previous run, based on\n     * the args equality function.\n     *\n     * This method is side-effectful: it stores the new args as the previous args.\n     */\n    async _performTask() {\n        const args = this._getArgs();\n        const prev = this._previousArgs;\n        this._previousArgs = args;\n        if (args !== prev &&\n            args !== undefined &&\n            (prev === undefined || !this._argsEqual(prev, args))) {\n            await this.run(args);\n        }\n    }\n    /**\n     * Runs a task manually.\n     *\n     * This can be useful for running tasks in response to events as opposed to\n     * automatically running when host element state changes.\n     *\n     * @param args an optional set of arguments to use for this task run. If args\n     *     is not given, the args function is called to get the arguments for\n     *     this run.\n     */\n    async run(args) {\n        args ??= this._getArgs();\n        // Remember the args for potential future automatic runs.\n        // TODO (justinfagnani): add test\n        this._previousArgs = args;\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort();\n        }\n        else {\n            // Clear the last complete task run in INITIAL because it may be a resolved\n            // promise. Also clear if COMPLETE or ERROR because the value returned by\n            // awaiting taskComplete may have changed since last run.\n            this._taskComplete = undefined;\n            this._resolveTaskComplete = undefined;\n            this._rejectTaskComplete = undefined;\n        }\n        this.status = TaskStatus.PENDING;\n        let result;\n        let error;\n        // Request an update to report pending state.\n        if (this.autoRun === 'afterUpdate') {\n            // Avoids a change-in-update warning\n            queueMicrotask(() => this._host.requestUpdate());\n        }\n        else {\n            this._host.requestUpdate();\n        }\n        const key = ++this._callId;\n        this._abortController = new AbortController();\n        let errored = false;\n        try {\n            result = await this._task(args, { signal: this._abortController.signal });\n        }\n        catch (e) {\n            errored = true;\n            error = e;\n        }\n        // If this is the most recent task call, process this value.\n        if (this._callId === key) {\n            if (result === initialState) {\n                this.status = TaskStatus.INITIAL;\n            }\n            else {\n                if (errored === false) {\n                    try {\n                        this._onComplete?.(result);\n                    }\n                    catch {\n                        // Ignore user errors from onComplete.\n                    }\n                    this.status = TaskStatus.COMPLETE;\n                    this._resolveTaskComplete?.(result);\n                }\n                else {\n                    try {\n                        this._onError?.(error);\n                    }\n                    catch {\n                        // Ignore user errors from onError.\n                    }\n                    this.status = TaskStatus.ERROR;\n                    this._rejectTaskComplete?.(error);\n                }\n                this._value = result;\n                this._error = error;\n            }\n            // Request an update with the final value.\n            this._host.requestUpdate();\n        }\n    }\n    /**\n     * Aborts the currently pending task run by aborting the AbortSignal\n     * passed to the task function.\n     *\n     * Aborting a task does nothing if the task is not running: ie, in the\n     * complete, error, or initial states.\n     *\n     * Aborting a task does not automatically cancel the task function. The task\n     * function must be written to accept the AbortSignal and either forward it\n     * to other APIs like `fetch()`, or handle cancellation manually by using\n     * [`signal.throwIfAborted()`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/throwIfAborted}\n     * or the\n     * [`abort`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_event}\n     * event.\n     *\n     * @param reason The reason for aborting. Passed to\n     *     `AbortController.abort()`.\n     */\n    abort(reason) {\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort(reason);\n        }\n    }\n    /**\n     * The result of the previous task run, if it resolved.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run errored.\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * The error from the previous task run, if it rejected.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run\n     * completed successfully.\n     */\n    get error() {\n        return this._error;\n    }\n    render(renderer) {\n        switch (this.status) {\n            case TaskStatus.INITIAL:\n                return renderer.initial?.();\n            case TaskStatus.PENDING:\n                return renderer.pending?.();\n            case TaskStatus.COMPLETE:\n                return renderer.complete?.(this.value);\n            case TaskStatus.ERROR:\n                return renderer.error?.(this.error);\n            default:\n                throw new Error(`Unexpected status: ${this.status}`);\n        }\n    }\n}\nexport const shallowArrayEquals = (oldArgs, newArgs) => oldArgs === newArgs ||\n    (oldArgs.length === newArgs.length &&\n        oldArgs.every((v, i) => !notEqual(v, newArgs[i])));\n//# sourceMappingURL=task.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const PartType = {\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6,\n};\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive = (c) => (...values) => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n});\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport class Directive {\n    constructor(_partInfo) { }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    /** @internal */\n    _$initialize(part, parent, attributeIndex) {\n        this.__part = part;\n        this._$parent = parent;\n        this.__attributeIndex = attributeIndex;\n    }\n    /** @internal */\n    _$resolve(part, props) {\n        return this.update(part, props);\n    }\n    update(_part, props) {\n        return this.render(...props);\n    }\n}\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        this._value = nothing;\n        if (partInfo.type !== PartType.CHILD) {\n            throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n        }\n    }\n    render(value) {\n        if (value === nothing || value == null) {\n            this._templateResult = undefined;\n            return (this._value = value);\n        }\n        if (value === noChange) {\n            return value;\n        }\n        if (typeof value != 'string') {\n            throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n        }\n        if (value === this._value) {\n            return this._templateResult;\n        }\n        this._value = value;\n        const strings = [value];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        strings.raw = strings;\n        // WARNING: impersonating a TemplateResult like this is extremely\n        // dangerous. Third-party directives should not do this.\n        return (this._templateResult = {\n            // Cast to a known set of integers that satisfy ResultType so that we\n            // don't have to export ResultType and possibly encourage this pattern.\n            // This property needs to remain unminified.\n            ['_$litType$']: this.constructor\n                .resultType,\n            strings,\n            values: [],\n        });\n    }\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n//# sourceMappingURL=unsafe-html.js.map","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","import { Task } from '@lit/task'\nimport { LitElement, html, css, unsafeCSS } from 'lit'\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'\nimport { openDB } from 'idb'\nimport closeIcon from '../../icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw'\nimport bibAvisStyles from './bib-avis.scss?inline'\n\nfunction isEmpty(node) {\n  return node.textContent.trim() === \"\"\n}\n\nasync function hash(obj) {\n  const utf8 = new TextEncoder().encode(JSON.stringify(obj))\n  const hashBuffer = await crypto.subtle.digest('SHA-256', utf8)\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  const hashHex = hashArray\n    .map((bytes) => bytes.toString(16).padStart(2, '0'))\n    .join('')\n  return hashHex\n}\n\n/**\n * Un avis\n * Affiche un avis\n */\nexport class BibAvis extends LitElement {\n  static properties = {\n    service: {\n      type: String\n    },\n    contexte: {\n      type: String,\n      default: 'site-web'\n    },\n    niveau: {\n      type: String\n    },\n    boutonFermer: {\n      type: Boolean,\n      attribute: 'bouton-fermer'\n    },\n    message: {\n      state: true\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(bibAvisStyles)}`,\n    css`\n    `\n  ]\n\n  #avis\n  #db\n\n  constructor() {\n    super()\n\n    this.#avis = null\n    this.service = 'https://avis.bib.umontreal.ca'\n    this.contexte = 'site-web-dev'\n    this.niveau = 'important'\n    this.boutonFermer = false\n  }\n\n  #getAvis() {\n    return new Task(this, {\n      task: async ([service, contexte, niveau], { signal }) => {\n        console.log('[#getAvis] is empty? %o', isEmpty(this))\n\n        const doGetAvis = new Promise(async (resolve, reject) => {\n          if (!isEmpty(this)) {\n            return resolve({ isLocal: true, message: this.innerHTML.split(/<!--\\?lit\\$\\d+\\$-->/).join('') })\n          }\n\n          const url = new URL(`${contexte}/${niveau}`, service)\n          const response = await fetch(url, {\n            headers: {\n              \"Accept\": \"application/json\",\n              // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            signal\n          })\n\n          if (!response.ok) {\n            return reject(new Error(response.status))\n          }\n\n          const { message } = await response.json()\n\n          resolve({ isLocal: false, message })\n        })\n\n        try {\n          const data = await doGetAvis\n          console.log('data: %o', data)\n          await this.#processAvis(data)\n        } catch (error) {\n          console.error('[#getAvis] An error occured: %o', error)\n        }\n\n        return data\n      },\n      args: () => [this.service, this.contexte, this.niveau]\n    })\n  }\n\n  async #processAvis(avis) {\n    if (!avis.message) {\n      this.setMessage(null)\n      return\n    }\n\n    if (!('indexedDB' in window)) {\n      this.setMessage(avis.message)\n      return\n    }\n\n    const db = this.#db = await openDB('@bibudem/ui', 1, {\n      upgrade(db) {\n        // Checks if the object store exists:\n        if (!db.objectStoreNames.contains('avis')) {\n          db.createObjectStore('avis', { keyPath: 'id' })\n        }\n      }\n    })\n\n    try {\n      const id = await hash(avis)\n      const storedAvis = await db.get('avis', id)\n      console.log('storedAvis: ', storedAvis)\n      if (storedAvis) {\n        if (!storedAvis.hidden) {\n          // Delete old entries\n          await db.delete('avis', id)\n          this.#show(storedAvis)\n        }\n      } else {\n        this.#show(avis)\n      }\n    } catch (error) {\n      console.error('Something went wrong with indexedDB: %o', error)\n      this.setMessage(avis.message)\n    }\n  }\n\n  async #show(avis) {\n    this.setMessage(avis)\n    if (this.#db) {\n      const id = await hash(avis)\n      await this.#db.add('avis', { ...avis, hidden: false }, id)\n    }\n  }\n\n  async #hide() {\n    const id = await hash(this.#avis)\n    await this.#db.put('avis', { ...this.#avis, hidden: true }, id)\n    this.#avis = null\n    this.requestUpdate()\n  }\n\n  connectedCallback() {\n    super.connectedCallback()\n    this.#getAvis()\n  }\n\n  #onBtnFermerClick() {\n    this.#hide()\n  }\n\n  _renderBoutonFermer() {\n    return this.boutonFermer ? html`<button class=\"btn-close\" aria-label=\"Fermer\" @click=\"${this.#onBtnFermerClick}\">${unsafeHTML(closeIcon)}</button>` : null\n  }\n\n  _avisTask = new Task(this, {\n    task: async ([service, contexte, niveau], { signal }) => {\n      const url = new URL(`${contexte}/${niveau}`, service)\n      const response = await fetch(url, {\n        headers: {\n          \"Accept\": \"application/json\",\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        signal\n      })\n      if (!response.ok) {\n        throw new Error(response.status)\n      }\n      return response.json()\n    },\n    args: () => [this.service, this.contexte, this.niveau]\n  })\n\n  // _renderRemote() {\n  //   return this._avisTask.render({\n  //     pending: () => html``,\n  //     complete: (avis) => this._renderAvis(avis.message),\n  //     error: e => {\n  //       console.error('An error occured while rendering _avisTask: %o', e)\n  //       return null\n  //     }\n  //   })\n  // }\n\n  render() {\n    return this.#avis?.message ? html`<aside class=\"container\"><div class=\"inner\"><div class=\"message\">${unsafeHTML(this.#avis.message)}</div>${this._renderBoutonFermer()}</div></aside>` : null\n  }\n\n  setMessage(message) {\n    this.#avis = typeof message === 'string' ? { message, isLocal: true } : message\n  }\n}\n\ncustomElements.define('bib-avis', BibAvis)","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 -960 960 960\\\" width=\\\"24\\\"><path d=\\\"M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z\\\"/></svg>\""],"names":["initialState","Symbol","Task","taskComplete","this","_taskComplete","status","Promise","res","rej","_resolveTaskComplete","_rejectTaskComplete","reject","_error","resolve","_value","host","task","args","_callId","_host","addController","taskConfig","_task","_argsFn","_argsEqual","argsEqual","shallowArrayEquals","_onComplete","onComplete","_onError","onError","autoRun","initialValue","_previousArgs","_getArgs","_performTask","Array","isArray","Error","prev","run","result","error","_abortController","abort","queueMicrotask","requestUpdate","key","AbortController","errored","signal","e","reason","renderer","initial","pending","complete","value","oldArgs","newArgs","length","every","v","i","notEqual","Directive","_partInfo","_$isConnected","_$parent","part","parent","attributeIndex","__part","__attributeIndex","props","update","_part","render","UnsafeHTMLDirective","partInfo","super","nothing","type","constructor","directiveName","_templateResult","noChange","strings","raw","_$litType$","resultType","values","unsafeHTML","c","_$litDirective$","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","transactionDoneMap","WeakMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","get","objectStoreNames","objectStore","wrap","set","has","replaceTraps","callback","IDBRequest","request","promise","unlisten","removeEventListener","success","addEventListener","newValue","func","IDBCursor","prototype","advance","continue","continuePrimaryKey","includes","apply","unwrap","tx","done","DOMException","IDBDatabase","IDBObjectStore","IDBIndex","Proxy","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","transaction","store","index","shift","all","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","openCursor","proxiedCursor","delete","isIteratorProp","asyncIterator","isEmpty","node","textContent","trim","hash","obj","utf8","TextEncoder","encode","JSON","stringify","hashBuffer","crypto","subtle","digest","from","Uint8Array","map","bytes","toString","padStart","join","BibAvis","LitElement","static","show","hide","avis","db","_avisTask","service","contexte","niveau","url","URL","response","fetch","headers","Accept","ok","json","boutonFermer","connectedCallback","html","message","_renderBoutonFermer","isLocal","getAvis","console","log","doGetAvis","innerHTML","split","data","processAvis","setMessage","window","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","then","catch","contains","createObjectStore","keyPath","id","storedAvis","hidden","add","put","onBtnFermerClick","String","default","Boolean","attribute","state","css","unsafeCSS","customElements","define"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}