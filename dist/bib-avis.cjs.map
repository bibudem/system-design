{"version":3,"file":"bib-avis.cjs","sources":["../node_modules/@lit/task/development/task.js","../node_modules/lit-html/development/directive.js","../node_modules/lit-html/development/directives/unsafe-html.js","../src/icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw","../src/components/bib-avis/bib-avis.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { notEqual } from '@lit/reactive-element';\n/**\n * States for task status\n */\nexport const TaskStatus = {\n    INITIAL: 0,\n    PENDING: 1,\n    COMPLETE: 2,\n    ERROR: 3,\n};\n/**\n * A special value that can be returned from task functions to reset the task\n * status to INITIAL.\n */\nexport const initialState = Symbol();\n// TODO(sorvell / justinfagnani): Some issues:\n// 1. With the task triggered in `update`, there is no ReactiveElement\n// change-in-update warning in the common case that the update itself does not change\n// the deps; however, Task's `requestUpdate` call to render pending state  will not\n// trigger another update since the element is updating. This `requestUpdate`\n// could be triggered in updated, but that results a change-in-update warning.\n// 2. There is no good signal for when the task has resolved and rendered other\n// than requestAnimationFrame. The user would need to store a promise for the\n// task and then wait for that and the element to update. (Update just justinfagnani:\n// Why isn't waiting taskComplete and updateComplete sufficient? This comment is\n// from before taskComplete existed!)\n/**\n * A controller that performs an asynchronous task (like a fetch) when its\n * host element updates.\n *\n * Task requests an update on the host element when the task starts and\n * completes so that the host can render the task status, value, and error as\n * the task runs.\n *\n * The task function must be supplied and can take a list of arguments. The\n * arguments are given to the Task as a function that returns a list of values,\n * which is run and checked for changes on every host update.\n *\n * The `value` property reports the completed value, and the `error` property\n * an error state if one occurs. The `status` property can be checked for\n * status and is of type `TaskStatus` which has states for initial, pending,\n * complete, and error.\n *\n * The `render` method accepts an object with optional methods corresponding\n * to the task statuses to easily render different templates for each task\n * status.\n *\n * The task is run automatically when its arguments change; however, this can\n * be customized by setting `autoRun` to false and calling `run` explicitly\n * to run the task.\n *\n * For a task to see state changes in the current update pass of the host\n * element, those changes must be made in `willUpdate()`. State changes in\n * `update()` or `updated()` will not be visible to the task until the next\n * update pass.\n *\n * @example\n *\n * ```ts\n * class MyElement extends LitElement {\n *   url = 'example.com/api';\n *   id = 0;\n *\n *   task = new Task(\n *     this,\n *     {\n *       task: async ([url, id]) => {\n *         const response = await fetch(`${this.url}?id=${this.id}`);\n *         if (!response.ok) {\n *           throw new Error(response.statusText);\n *         }\n *         return response.json();\n *       },\n *       args: () => [this.id, this.url],\n *     }\n *   );\n *\n *   render() {\n *     return this.task.render({\n *       pending: () => html`<p>Loading...</p>`,\n *       complete: (value) => html`<p>Result: ${value}</p>`\n *     });\n *   }\n * }\n * ```\n */\nexport class Task {\n    /**\n     * A Promise that resolve when the current task run is complete.\n     *\n     * If a new task run is started while a previous run is pending, the Promise\n     * is kept and only resolved when the new run is completed.\n     */\n    get taskComplete() {\n        // If a task run exists, return the cached promise. This is true in the case\n        // where the user has called taskComplete in pending or completed state\n        // before and has not started a new task run since.\n        if (this._taskComplete) {\n            return this._taskComplete;\n        }\n        // Generate an in-progress promise if the the status is pending and has been\n        // cleared by .run().\n        if (this.status === TaskStatus.PENDING) {\n            this._taskComplete = new Promise((res, rej) => {\n                this._resolveTaskComplete = res;\n                this._rejectTaskComplete = rej;\n            });\n            // If the status is error, return a rejected promise.\n        }\n        else if (this.status === TaskStatus.ERROR) {\n            this._taskComplete = Promise.reject(this._error);\n            // Otherwise we are at a task run's completion or this is the first\n            // request and we are not in the middle of a task (i.e. INITIAL).\n        }\n        else {\n            this._taskComplete = Promise.resolve(this._value);\n        }\n        return this._taskComplete;\n    }\n    constructor(host, task, args) {\n        this._callId = 0;\n        this.status = TaskStatus.INITIAL;\n        (this._host = host).addController(this);\n        const taskConfig = typeof task === 'object' ? task : { task, args };\n        this._task = taskConfig.task;\n        this._argsFn = taskConfig.args;\n        this._argsEqual = taskConfig.argsEqual ?? shallowArrayEquals;\n        this._onComplete = taskConfig.onComplete;\n        this._onError = taskConfig.onError;\n        this.autoRun = taskConfig.autoRun ?? true;\n        // Providing initialValue puts the task in COMPLETE state and stores the\n        // args immediately so it only runs when they change again.\n        if ('initialValue' in taskConfig) {\n            this._value = taskConfig.initialValue;\n            this.status = TaskStatus.COMPLETE;\n            this._previousArgs = this._getArgs?.();\n        }\n    }\n    hostUpdate() {\n        if (this.autoRun === true) {\n            this._performTask();\n        }\n    }\n    hostUpdated() {\n        if (this.autoRun === 'afterUpdate') {\n            this._performTask();\n        }\n    }\n    _getArgs() {\n        if (this._argsFn === undefined) {\n            return undefined;\n        }\n        const args = this._argsFn();\n        if (!Array.isArray(args)) {\n            throw new Error('The args function must return an array');\n        }\n        return args;\n    }\n    /**\n     * Determines if the task should run when it's triggered because of a\n     * host update, and runs the task if it should.\n     *\n     * A task should run when its arguments change from the previous run, based on\n     * the args equality function.\n     *\n     * This method is side-effectful: it stores the new args as the previous args.\n     */\n    async _performTask() {\n        const args = this._getArgs();\n        const prev = this._previousArgs;\n        this._previousArgs = args;\n        if (args !== prev &&\n            args !== undefined &&\n            (prev === undefined || !this._argsEqual(prev, args))) {\n            await this.run(args);\n        }\n    }\n    /**\n     * Runs a task manually.\n     *\n     * This can be useful for running tasks in response to events as opposed to\n     * automatically running when host element state changes.\n     *\n     * @param args an optional set of arguments to use for this task run. If args\n     *     is not given, the args function is called to get the arguments for\n     *     this run.\n     */\n    async run(args) {\n        args ??= this._getArgs();\n        // Remember the args for potential future automatic runs.\n        // TODO (justinfagnani): add test\n        this._previousArgs = args;\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort();\n        }\n        else {\n            // Clear the last complete task run in INITIAL because it may be a resolved\n            // promise. Also clear if COMPLETE or ERROR because the value returned by\n            // awaiting taskComplete may have changed since last run.\n            this._taskComplete = undefined;\n            this._resolveTaskComplete = undefined;\n            this._rejectTaskComplete = undefined;\n        }\n        this.status = TaskStatus.PENDING;\n        let result;\n        let error;\n        // Request an update to report pending state.\n        if (this.autoRun === 'afterUpdate') {\n            // Avoids a change-in-update warning\n            queueMicrotask(() => this._host.requestUpdate());\n        }\n        else {\n            this._host.requestUpdate();\n        }\n        const key = ++this._callId;\n        this._abortController = new AbortController();\n        let errored = false;\n        try {\n            result = await this._task(args, { signal: this._abortController.signal });\n        }\n        catch (e) {\n            errored = true;\n            error = e;\n        }\n        // If this is the most recent task call, process this value.\n        if (this._callId === key) {\n            if (result === initialState) {\n                this.status = TaskStatus.INITIAL;\n            }\n            else {\n                if (errored === false) {\n                    try {\n                        this._onComplete?.(result);\n                    }\n                    catch {\n                        // Ignore user errors from onComplete.\n                    }\n                    this.status = TaskStatus.COMPLETE;\n                    this._resolveTaskComplete?.(result);\n                }\n                else {\n                    try {\n                        this._onError?.(error);\n                    }\n                    catch {\n                        // Ignore user errors from onError.\n                    }\n                    this.status = TaskStatus.ERROR;\n                    this._rejectTaskComplete?.(error);\n                }\n                this._value = result;\n                this._error = error;\n            }\n            // Request an update with the final value.\n            this._host.requestUpdate();\n        }\n    }\n    /**\n     * Aborts the currently pending task run by aborting the AbortSignal\n     * passed to the task function.\n     *\n     * Aborting a task does nothing if the task is not running: ie, in the\n     * complete, error, or initial states.\n     *\n     * Aborting a task does not automatically cancel the task function. The task\n     * function must be written to accept the AbortSignal and either forward it\n     * to other APIs like `fetch()`, or handle cancellation manually by using\n     * [`signal.throwIfAborted()`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/throwIfAborted}\n     * or the\n     * [`abort`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_event}\n     * event.\n     *\n     * @param reason The reason for aborting. Passed to\n     *     `AbortController.abort()`.\n     */\n    abort(reason) {\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort(reason);\n        }\n    }\n    /**\n     * The result of the previous task run, if it resolved.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run errored.\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * The error from the previous task run, if it rejected.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run\n     * completed successfully.\n     */\n    get error() {\n        return this._error;\n    }\n    render(renderer) {\n        switch (this.status) {\n            case TaskStatus.INITIAL:\n                return renderer.initial?.();\n            case TaskStatus.PENDING:\n                return renderer.pending?.();\n            case TaskStatus.COMPLETE:\n                return renderer.complete?.(this.value);\n            case TaskStatus.ERROR:\n                return renderer.error?.(this.error);\n            default:\n                throw new Error(`Unexpected status: ${this.status}`);\n        }\n    }\n}\nexport const shallowArrayEquals = (oldArgs, newArgs) => oldArgs === newArgs ||\n    (oldArgs.length === newArgs.length &&\n        oldArgs.every((v, i) => !notEqual(v, newArgs[i])));\n//# sourceMappingURL=task.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const PartType = {\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6,\n};\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive = (c) => (...values) => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n});\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport class Directive {\n    constructor(_partInfo) { }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    /** @internal */\n    _$initialize(part, parent, attributeIndex) {\n        this.__part = part;\n        this._$parent = parent;\n        this.__attributeIndex = attributeIndex;\n    }\n    /** @internal */\n    _$resolve(part, props) {\n        return this.update(part, props);\n    }\n    update(_part, props) {\n        return this.render(...props);\n    }\n}\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        this._value = nothing;\n        if (partInfo.type !== PartType.CHILD) {\n            throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n        }\n    }\n    render(value) {\n        if (value === nothing || value == null) {\n            this._templateResult = undefined;\n            return (this._value = value);\n        }\n        if (value === noChange) {\n            return value;\n        }\n        if (typeof value != 'string') {\n            throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n        }\n        if (value === this._value) {\n            return this._templateResult;\n        }\n        this._value = value;\n        const strings = [value];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        strings.raw = strings;\n        // WARNING: impersonating a TemplateResult like this is extremely\n        // dangerous. Third-party directives should not do this.\n        return (this._templateResult = {\n            // Cast to a known set of integers that satisfy ResultType so that we\n            // don't have to export ResultType and possibly encourage this pattern.\n            // This property needs to remain unminified.\n            ['_$litType$']: this.constructor\n                .resultType,\n            strings,\n            values: [],\n        });\n    }\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n//# sourceMappingURL=unsafe-html.js.map","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 -960 960 960\\\" width=\\\"24\\\"><path d=\\\"M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z\\\"/></svg>\"","import { Task } from '@lit/task'\nimport { LitElement, html, css, unsafeCSS } from 'lit'\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'\nimport closeIcon from '../../icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw'\nimport bibAvisStyles from './bib-avis.scss?inline'\n\nconsole.log('bibAvisStyles: ', bibAvisStyles)\n\nfunction isEmpty(node) {\n  return node.textContent.trim() === \"\"\n}\n\n/**\n * Un avis\n * Affiche un avis\n */\nexport class BibAvis extends LitElement {\n  static properties = {\n    service: {\n      type: String\n    },\n    contexte: {\n      type: String,\n      default: 'site-web'\n    },\n    niveau: {\n      type: String\n    },\n    boutonFermer: {\n      type: Boolean,\n      attribute: 'bouton-fermer'\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(bibAvisStyles)}`,\n    css`\n    `\n  ]\n\n  constructor() {\n    super()\n\n    this.service = 'https://avis.bib.umontreal.ca'\n    this.contexte = 'site-web-dev'\n    this.niveau = 'important'\n    this.boutonFermer = false\n  }\n\n  _onBtnFermerClick() {\n    alert('Fonction à venir!')\n  }\n\n  _renderBoutonFermer() {\n    return this.boutonFermer ? html`<button class=\"btn-close\" aria-label=\"Fermer\" @click=\"${this._onBtnFermerClick}\">${unsafeHTML(closeIcon)}</button>` : null\n  }\n\n  _renderAvis(message) {\n    return message ? html`<aside class=\"container\"><div class=\"inner\"><div class=\"message\">${unsafeHTML(message)}</div>${this._renderBoutonFermer()}</div></aside>` : null\n  }\n\n  _avisTask = new Task(this, {\n    task: async ([service, contexte, niveau], { signal }) => {\n      const url = new URL(`${contexte}/${niveau}`, service)\n      const response = await fetch(url, {\n        headers: {\n          \"Accept\": \"application/json\",\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        signal\n      })\n      if (!response.ok) {\n        throw new Error(reaponse.status)\n      }\n      return response.json()\n    },\n    args: () => [this.service, this.contexte, this.niveau]\n  })\n\n  _renderRemote() {\n    return this._avisTask.render({\n      pending: () => html``,\n      complete: (avis) => this._renderAvis(avis.message),\n      error: e => {\n        console.log(e)\n        return null\n      }\n    })\n  }\n\n  _renderLocal() {\n    return this._renderAvis(`<slot />`)\n  }\n\n  render() {\n    return isEmpty(this) ? this._renderRemote() : this._renderLocal()\n  }\n}\n\ncustomElements.define('bib-avis', BibAvis)"],"names":["initialState","Symbol","Task","taskComplete","this","_taskComplete","status","Promise","res","rej","_resolveTaskComplete","_rejectTaskComplete","reject","_error","resolve","_value","constructor","host","task","args","_callId","_host","addController","taskConfig","_task","_argsFn","_argsEqual","argsEqual","shallowArrayEquals","_onComplete","onComplete","_onError","onError","autoRun","initialValue","_previousArgs","_getArgs","hostUpdate","_performTask","hostUpdated","undefined","Array","isArray","Error","prev","run","result","error","_abortController","abort","queueMicrotask","requestUpdate","key","AbortController","errored","signal","e","reason","value","render","renderer","initial","pending","complete","oldArgs","newArgs","length","every","v","i","notEqual","Directive","_partInfo","_$isConnected","_$parent","_$initialize","part","parent","attributeIndex","__part","__attributeIndex","_$resolve","props","update","_part","UnsafeHTMLDirective","partInfo","super","nothing","type","directiveName","_templateResult","noChange","strings","raw","_$litType$","resultType","values","unsafeHTML","c","_$litDirective$","t","console","log","bibAvisStyles","BibAvis","LitElement","_avisTask","async","service","contexte","niveau","r","url","URL","response","fetch","headers","Accept","ok","reaponse","json","boutonFermer","_onBtnFermerClick","alert","_renderBoutonFermer","html","_renderAvis","message","_renderRemote","avis","_renderLocal","textContent","trim","static","String","default","Boolean","attribute","css","unsafeCSS","customElements","define"],"mappings":"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","x_google_ignoreList":[0,1,2]}