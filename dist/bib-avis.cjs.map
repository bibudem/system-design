{"version":3,"file":"bib-avis.cjs","sources":["../node_modules/@lit/task/development/task.js","../node_modules/lit-html/development/directive.js","../node_modules/lit-html/development/directives/unsafe-html.js","../src/icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw","../src/components/bib-avis/bib-avis.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { notEqual } from '@lit/reactive-element';\n/**\n * States for task status\n */\nexport const TaskStatus = {\n    INITIAL: 0,\n    PENDING: 1,\n    COMPLETE: 2,\n    ERROR: 3,\n};\n/**\n * A special value that can be returned from task functions to reset the task\n * status to INITIAL.\n */\nexport const initialState = Symbol();\n// TODO(sorvell / justinfagnani): Some issues:\n// 1. With the task triggered in `update`, there is no ReactiveElement\n// change-in-update warning in the common case that the update itself does not change\n// the deps; however, Task's `requestUpdate` call to render pending state  will not\n// trigger another update since the element is updating. This `requestUpdate`\n// could be triggered in updated, but that results a change-in-update warning.\n// 2. There is no good signal for when the task has resolved and rendered other\n// than requestAnimationFrame. The user would need to store a promise for the\n// task and then wait for that and the element to update. (Update just justinfagnani:\n// Why isn't waiting taskComplete and updateComplete sufficient? This comment is\n// from before taskComplete existed!)\n/**\n * A controller that performs an asynchronous task (like a fetch) when its\n * host element updates.\n *\n * Task requests an update on the host element when the task starts and\n * completes so that the host can render the task status, value, and error as\n * the task runs.\n *\n * The task function must be supplied and can take a list of arguments. The\n * arguments are given to the Task as a function that returns a list of values,\n * which is run and checked for changes on every host update.\n *\n * The `value` property reports the completed value, and the `error` property\n * an error state if one occurs. The `status` property can be checked for\n * status and is of type `TaskStatus` which has states for initial, pending,\n * complete, and error.\n *\n * The `render` method accepts an object with optional methods corresponding\n * to the task statuses to easily render different templates for each task\n * status.\n *\n * The task is run automatically when its arguments change; however, this can\n * be customized by setting `autoRun` to false and calling `run` explicitly\n * to run the task.\n *\n * For a task to see state changes in the current update pass of the host\n * element, those changes must be made in `willUpdate()`. State changes in\n * `update()` or `updated()` will not be visible to the task until the next\n * update pass.\n *\n * @example\n *\n * ```ts\n * class MyElement extends LitElement {\n *   url = 'example.com/api';\n *   id = 0;\n *\n *   task = new Task(\n *     this,\n *     {\n *       task: async ([url, id]) => {\n *         const response = await fetch(`${this.url}?id=${this.id}`);\n *         if (!response.ok) {\n *           throw new Error(response.statusText);\n *         }\n *         return response.json();\n *       },\n *       args: () => [this.id, this.url],\n *     }\n *   );\n *\n *   render() {\n *     return this.task.render({\n *       pending: () => html`<p>Loading...</p>`,\n *       complete: (value) => html`<p>Result: ${value}</p>`\n *     });\n *   }\n * }\n * ```\n */\nexport class Task {\n    /**\n     * A Promise that resolve when the current task run is complete.\n     *\n     * If a new task run is started while a previous run is pending, the Promise\n     * is kept and only resolved when the new run is completed.\n     */\n    get taskComplete() {\n        // If a task run exists, return the cached promise. This is true in the case\n        // where the user has called taskComplete in pending or completed state\n        // before and has not started a new task run since.\n        if (this._taskComplete) {\n            return this._taskComplete;\n        }\n        // Generate an in-progress promise if the the status is pending and has been\n        // cleared by .run().\n        if (this.status === TaskStatus.PENDING) {\n            this._taskComplete = new Promise((res, rej) => {\n                this._resolveTaskComplete = res;\n                this._rejectTaskComplete = rej;\n            });\n            // If the status is error, return a rejected promise.\n        }\n        else if (this.status === TaskStatus.ERROR) {\n            this._taskComplete = Promise.reject(this._error);\n            // Otherwise we are at a task run's completion or this is the first\n            // request and we are not in the middle of a task (i.e. INITIAL).\n        }\n        else {\n            this._taskComplete = Promise.resolve(this._value);\n        }\n        return this._taskComplete;\n    }\n    constructor(host, task, args) {\n        this._callId = 0;\n        this.status = TaskStatus.INITIAL;\n        (this._host = host).addController(this);\n        const taskConfig = typeof task === 'object' ? task : { task, args };\n        this._task = taskConfig.task;\n        this._argsFn = taskConfig.args;\n        this._argsEqual = taskConfig.argsEqual ?? shallowArrayEquals;\n        this._onComplete = taskConfig.onComplete;\n        this._onError = taskConfig.onError;\n        this.autoRun = taskConfig.autoRun ?? true;\n        // Providing initialValue puts the task in COMPLETE state and stores the\n        // args immediately so it only runs when they change again.\n        if ('initialValue' in taskConfig) {\n            this._value = taskConfig.initialValue;\n            this.status = TaskStatus.COMPLETE;\n            this._previousArgs = this._getArgs?.();\n        }\n    }\n    hostUpdate() {\n        if (this.autoRun === true) {\n            this._performTask();\n        }\n    }\n    hostUpdated() {\n        if (this.autoRun === 'afterUpdate') {\n            this._performTask();\n        }\n    }\n    _getArgs() {\n        if (this._argsFn === undefined) {\n            return undefined;\n        }\n        const args = this._argsFn();\n        if (!Array.isArray(args)) {\n            throw new Error('The args function must return an array');\n        }\n        return args;\n    }\n    /**\n     * Determines if the task should run when it's triggered because of a\n     * host update, and runs the task if it should.\n     *\n     * A task should run when its arguments change from the previous run, based on\n     * the args equality function.\n     *\n     * This method is side-effectful: it stores the new args as the previous args.\n     */\n    async _performTask() {\n        const args = this._getArgs();\n        const prev = this._previousArgs;\n        this._previousArgs = args;\n        if (args !== prev &&\n            args !== undefined &&\n            (prev === undefined || !this._argsEqual(prev, args))) {\n            await this.run(args);\n        }\n    }\n    /**\n     * Runs a task manually.\n     *\n     * This can be useful for running tasks in response to events as opposed to\n     * automatically running when host element state changes.\n     *\n     * @param args an optional set of arguments to use for this task run. If args\n     *     is not given, the args function is called to get the arguments for\n     *     this run.\n     */\n    async run(args) {\n        args ??= this._getArgs();\n        // Remember the args for potential future automatic runs.\n        // TODO (justinfagnani): add test\n        this._previousArgs = args;\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort();\n        }\n        else {\n            // Clear the last complete task run in INITIAL because it may be a resolved\n            // promise. Also clear if COMPLETE or ERROR because the value returned by\n            // awaiting taskComplete may have changed since last run.\n            this._taskComplete = undefined;\n            this._resolveTaskComplete = undefined;\n            this._rejectTaskComplete = undefined;\n        }\n        this.status = TaskStatus.PENDING;\n        let result;\n        let error;\n        // Request an update to report pending state.\n        if (this.autoRun === 'afterUpdate') {\n            // Avoids a change-in-update warning\n            queueMicrotask(() => this._host.requestUpdate());\n        }\n        else {\n            this._host.requestUpdate();\n        }\n        const key = ++this._callId;\n        this._abortController = new AbortController();\n        let errored = false;\n        try {\n            result = await this._task(args, { signal: this._abortController.signal });\n        }\n        catch (e) {\n            errored = true;\n            error = e;\n        }\n        // If this is the most recent task call, process this value.\n        if (this._callId === key) {\n            if (result === initialState) {\n                this.status = TaskStatus.INITIAL;\n            }\n            else {\n                if (errored === false) {\n                    try {\n                        this._onComplete?.(result);\n                    }\n                    catch {\n                        // Ignore user errors from onComplete.\n                    }\n                    this.status = TaskStatus.COMPLETE;\n                    this._resolveTaskComplete?.(result);\n                }\n                else {\n                    try {\n                        this._onError?.(error);\n                    }\n                    catch {\n                        // Ignore user errors from onError.\n                    }\n                    this.status = TaskStatus.ERROR;\n                    this._rejectTaskComplete?.(error);\n                }\n                this._value = result;\n                this._error = error;\n            }\n            // Request an update with the final value.\n            this._host.requestUpdate();\n        }\n    }\n    /**\n     * Aborts the currently pending task run by aborting the AbortSignal\n     * passed to the task function.\n     *\n     * Aborting a task does nothing if the task is not running: ie, in the\n     * complete, error, or initial states.\n     *\n     * Aborting a task does not automatically cancel the task function. The task\n     * function must be written to accept the AbortSignal and either forward it\n     * to other APIs like `fetch()`, or handle cancellation manually by using\n     * [`signal.throwIfAborted()`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/throwIfAborted}\n     * or the\n     * [`abort`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_event}\n     * event.\n     *\n     * @param reason The reason for aborting. Passed to\n     *     `AbortController.abort()`.\n     */\n    abort(reason) {\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort(reason);\n        }\n    }\n    /**\n     * The result of the previous task run, if it resolved.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run errored.\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * The error from the previous task run, if it rejected.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run\n     * completed successfully.\n     */\n    get error() {\n        return this._error;\n    }\n    render(renderer) {\n        switch (this.status) {\n            case TaskStatus.INITIAL:\n                return renderer.initial?.();\n            case TaskStatus.PENDING:\n                return renderer.pending?.();\n            case TaskStatus.COMPLETE:\n                return renderer.complete?.(this.value);\n            case TaskStatus.ERROR:\n                return renderer.error?.(this.error);\n            default:\n                throw new Error(`Unexpected status: ${this.status}`);\n        }\n    }\n}\nexport const shallowArrayEquals = (oldArgs, newArgs) => oldArgs === newArgs ||\n    (oldArgs.length === newArgs.length &&\n        oldArgs.every((v, i) => !notEqual(v, newArgs[i])));\n//# sourceMappingURL=task.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const PartType = {\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6,\n};\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive = (c) => (...values) => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n});\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport class Directive {\n    constructor(_partInfo) { }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    /** @internal */\n    _$initialize(part, parent, attributeIndex) {\n        this.__part = part;\n        this._$parent = parent;\n        this.__attributeIndex = attributeIndex;\n    }\n    /** @internal */\n    _$resolve(part, props) {\n        return this.update(part, props);\n    }\n    update(_part, props) {\n        return this.render(...props);\n    }\n}\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        this._value = nothing;\n        if (partInfo.type !== PartType.CHILD) {\n            throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n        }\n    }\n    render(value) {\n        if (value === nothing || value == null) {\n            this._templateResult = undefined;\n            return (this._value = value);\n        }\n        if (value === noChange) {\n            return value;\n        }\n        if (typeof value != 'string') {\n            throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n        }\n        if (value === this._value) {\n            return this._templateResult;\n        }\n        this._value = value;\n        const strings = [value];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        strings.raw = strings;\n        // WARNING: impersonating a TemplateResult like this is extremely\n        // dangerous. Third-party directives should not do this.\n        return (this._templateResult = {\n            // Cast to a known set of integers that satisfy ResultType so that we\n            // don't have to export ResultType and possibly encourage this pattern.\n            // This property needs to remain unminified.\n            ['_$litType$']: this.constructor\n                .resultType,\n            strings,\n            values: [],\n        });\n    }\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n//# sourceMappingURL=unsafe-html.js.map","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 -960 960 960\\\" width=\\\"24\\\"><path d=\\\"M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z\\\"/></svg>\"","import { Task } from '@lit/task'\nimport { LitElement, css, html } from 'lit'\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'\nimport closeIcon from '../../icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw'\n\nfunction isEmpty(node) {\n  return node.textContent.trim() === \"\"\n}\n\n/**\n * Un avis\n * Affiche un avis\n */\nexport class BibAvis extends LitElement {\n  static properties = {\n    service: {\n      type: String\n    },\n    contexte: {\n      type: String,\n      default: 'site-web'\n    },\n    niveau: {\n      type: String\n    },\n    boutonFermer: {\n      type: Boolean\n    }\n  }\n\n  static styles = css`\n    :host,\n    * {\n      box-sizing: border-box;\n    }\n\n    :host {\n      display: block;\n      font-size: var(--bib-avis-size, var(--md-sys-typescale-title-medium-size, 1rem));\n      background: var(--bib-avis-container-color, var(--md-sys-color-warningContainer, #fffac6))\n    }\n\n    .inner {\n      display: flex;\n      align-items: center;\n      max-width: 1220px;\n      margin: 0 auto;\n      padding: 11px 19px;\n      gap: 1em\n    }\n\n    .message {\n      flex-grow: 1;\n      min-height: 24px;\n    }\n\n    .btn-close {\n      display: inline-flex;\n      -webkit-box-align: center;\n      align-items: center;\n      -webkit-box-pack: center;\n      justify-content: center;\n      position: relative;\n      box-sizing: border-box;\n      -webkit-tap-highlight-color: transparent;\n      background-color: transparent;\n      outline: 0px;\n      border: 0px;\n      margin: 0px;\n      cursor: pointer;\n      user-select: none;\n      vertical-align: middle;\n      appearance: none;\n      text-decoration: none;\n      text-align: center;\n      flex: 0 0 auto;\n      font-size: 1.5rem;\n      font-size: 36px;\n      font-weight: 700;\n      line-height: 1;\n      position: relative;\n      padding: 8px;\n      padding: 0;\n      border-radius: 50%;\n      overflow: visible;\n      color: var(--bib-btn-close-color, rgba(0, 0, 0, 0.4));\n      transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    }\n\n    .btn-close:hover {\n      color: var(--bib-btn-close-hover-color, rgba(0, 0, 0, 0.8));\n    }\n\n    .btn-close::after {\n      content: '';\n      position: absolute;\n      width: calc(100% + 16px);\n      height: calc(100% + 16px);\n      border-radius: 50%;\n      background-color: transparent;\n      transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    }\n\n    .btn-close:hover::after {\n      background-color: rgba(0, 0, 0, 0.04);\n    }\n\n    .btn-close > svg {\n      fill: currentColor;\n    }\n  `\n\n  constructor() {\n    super()\n\n    this.service = 'https://avis.bib.umontreal.ca'\n    this.contexte = 'site-web-dev'\n    this.niveau = 'important'\n    this.boutonFermer = false\n  }\n\n  _onBtnFermerClick() {\n    alert('Fonction à venir!')\n  }\n\n  _renderBoutonFermer() {\n    return this.boutonFermer ? html`<button class=\"btn-close\" aria-label=\"Fermer\" @click=\"${this._onBtnFermerClick}\">${unsafeHTML(closeIcon)}</button>` : null\n  }\n\n  _renderAvis(message) {\n    return message ? html`<div class=\"container\"><div class=\"inner\"><div class=\"message\">${unsafeHTML(message)}</div>${this._renderBoutonFermer()}</div></div>` : null\n  }\n\n  _avisTask = new Task(this, {\n    task: async ([service, contexte, niveau], { signal }) => {\n      const url = new URL(`${contexte}/${niveau}`, service)\n      const response = await fetch(url, {\n        headers: {\n          \"Accept\": \"application/json\",\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        signal\n      })\n      if (!response.ok) {\n        throw new Error(reaponse.status)\n      }\n      return response.json()\n    },\n    args: () => [this.service, this.contexte, this.niveau]\n  })\n\n  _renderRemote() {\n    return this._avisTask.render({\n      pending: () => html``,\n      complete: (avis) => this._renderAvis(avis.message),\n      error: e => {\n        console.log(e)\n        return null\n      }\n    })\n  }\n\n  _renderLocal() {\n    return this._renderAvis(`<slot />`)\n  }\n\n  render() {\n    return isEmpty(this) ? this._renderRemote() : this._renderLocal()\n  }\n}\n\ncustomElements.define('bib-avis', BibAvis)"],"names":["TaskStatus","initialState","Task","res","rej","host","task","args","taskConfig","shallowArrayEquals","prev","result","error","key","errored","e","reason","renderer","oldArgs","newArgs","v","notEqual","PartType","directive","c","values","Directive","_partInfo","part","parent","attributeIndex","props","_part","HTML_RESULT","UnsafeHTMLDirective","partInfo","nothing","value","noChange","strings","unsafeHTML","closeIcon","isEmpty","node","BibAvis","LitElement","__publicField","service","contexte","niveau","signal","url","response","html","message","avis","css"],"mappings":"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","x_google_ignoreList":[0,1,2]}