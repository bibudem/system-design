{"version":3,"file":"bib-avis.cjs","sources":["../node_modules/@lit/task/development/task.js","../node_modules/lit-html/development/directive.js","../node_modules/lit-html/development/directives/unsafe-html.js","../node_modules/idb/build/index.js","../src/components/bib-avis/bib-avis.js","../src/icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { notEqual } from '@lit/reactive-element';\n/**\n * States for task status\n */\nexport const TaskStatus = {\n    INITIAL: 0,\n    PENDING: 1,\n    COMPLETE: 2,\n    ERROR: 3,\n};\n/**\n * A special value that can be returned from task functions to reset the task\n * status to INITIAL.\n */\nexport const initialState = Symbol();\n// TODO(sorvell / justinfagnani): Some issues:\n// 1. With the task triggered in `update`, there is no ReactiveElement\n// change-in-update warning in the common case that the update itself does not change\n// the deps; however, Task's `requestUpdate` call to render pending state  will not\n// trigger another update since the element is updating. This `requestUpdate`\n// could be triggered in updated, but that results a change-in-update warning.\n// 2. There is no good signal for when the task has resolved and rendered other\n// than requestAnimationFrame. The user would need to store a promise for the\n// task and then wait for that and the element to update. (Update just justinfagnani:\n// Why isn't waiting taskComplete and updateComplete sufficient? This comment is\n// from before taskComplete existed!)\n/**\n * A controller that performs an asynchronous task (like a fetch) when its\n * host element updates.\n *\n * Task requests an update on the host element when the task starts and\n * completes so that the host can render the task status, value, and error as\n * the task runs.\n *\n * The task function must be supplied and can take a list of arguments. The\n * arguments are given to the Task as a function that returns a list of values,\n * which is run and checked for changes on every host update.\n *\n * The `value` property reports the completed value, and the `error` property\n * an error state if one occurs. The `status` property can be checked for\n * status and is of type `TaskStatus` which has states for initial, pending,\n * complete, and error.\n *\n * The `render` method accepts an object with optional methods corresponding\n * to the task statuses to easily render different templates for each task\n * status.\n *\n * The task is run automatically when its arguments change; however, this can\n * be customized by setting `autoRun` to false and calling `run` explicitly\n * to run the task.\n *\n * For a task to see state changes in the current update pass of the host\n * element, those changes must be made in `willUpdate()`. State changes in\n * `update()` or `updated()` will not be visible to the task until the next\n * update pass.\n *\n * @example\n *\n * ```ts\n * class MyElement extends LitElement {\n *   url = 'example.com/api';\n *   id = 0;\n *\n *   task = new Task(\n *     this,\n *     {\n *       task: async ([url, id]) => {\n *         const response = await fetch(`${this.url}?id=${this.id}`);\n *         if (!response.ok) {\n *           throw new Error(response.statusText);\n *         }\n *         return response.json();\n *       },\n *       args: () => [this.id, this.url],\n *     }\n *   );\n *\n *   render() {\n *     return this.task.render({\n *       pending: () => html`<p>Loading...</p>`,\n *       complete: (value) => html`<p>Result: ${value}</p>`\n *     });\n *   }\n * }\n * ```\n */\nexport class Task {\n    /**\n     * A Promise that resolve when the current task run is complete.\n     *\n     * If a new task run is started while a previous run is pending, the Promise\n     * is kept and only resolved when the new run is completed.\n     */\n    get taskComplete() {\n        // If a task run exists, return the cached promise. This is true in the case\n        // where the user has called taskComplete in pending or completed state\n        // before and has not started a new task run since.\n        if (this._taskComplete) {\n            return this._taskComplete;\n        }\n        // Generate an in-progress promise if the the status is pending and has been\n        // cleared by .run().\n        if (this.status === TaskStatus.PENDING) {\n            this._taskComplete = new Promise((res, rej) => {\n                this._resolveTaskComplete = res;\n                this._rejectTaskComplete = rej;\n            });\n            // If the status is error, return a rejected promise.\n        }\n        else if (this.status === TaskStatus.ERROR) {\n            this._taskComplete = Promise.reject(this._error);\n            // Otherwise we are at a task run's completion or this is the first\n            // request and we are not in the middle of a task (i.e. INITIAL).\n        }\n        else {\n            this._taskComplete = Promise.resolve(this._value);\n        }\n        return this._taskComplete;\n    }\n    constructor(host, task, args) {\n        this._callId = 0;\n        this.status = TaskStatus.INITIAL;\n        (this._host = host).addController(this);\n        const taskConfig = typeof task === 'object' ? task : { task, args };\n        this._task = taskConfig.task;\n        this._argsFn = taskConfig.args;\n        this._argsEqual = taskConfig.argsEqual ?? shallowArrayEquals;\n        this._onComplete = taskConfig.onComplete;\n        this._onError = taskConfig.onError;\n        this.autoRun = taskConfig.autoRun ?? true;\n        // Providing initialValue puts the task in COMPLETE state and stores the\n        // args immediately so it only runs when they change again.\n        if ('initialValue' in taskConfig) {\n            this._value = taskConfig.initialValue;\n            this.status = TaskStatus.COMPLETE;\n            this._previousArgs = this._getArgs?.();\n        }\n    }\n    hostUpdate() {\n        if (this.autoRun === true) {\n            this._performTask();\n        }\n    }\n    hostUpdated() {\n        if (this.autoRun === 'afterUpdate') {\n            this._performTask();\n        }\n    }\n    _getArgs() {\n        if (this._argsFn === undefined) {\n            return undefined;\n        }\n        const args = this._argsFn();\n        if (!Array.isArray(args)) {\n            throw new Error('The args function must return an array');\n        }\n        return args;\n    }\n    /**\n     * Determines if the task should run when it's triggered because of a\n     * host update, and runs the task if it should.\n     *\n     * A task should run when its arguments change from the previous run, based on\n     * the args equality function.\n     *\n     * This method is side-effectful: it stores the new args as the previous args.\n     */\n    async _performTask() {\n        const args = this._getArgs();\n        const prev = this._previousArgs;\n        this._previousArgs = args;\n        if (args !== prev &&\n            args !== undefined &&\n            (prev === undefined || !this._argsEqual(prev, args))) {\n            await this.run(args);\n        }\n    }\n    /**\n     * Runs a task manually.\n     *\n     * This can be useful for running tasks in response to events as opposed to\n     * automatically running when host element state changes.\n     *\n     * @param args an optional set of arguments to use for this task run. If args\n     *     is not given, the args function is called to get the arguments for\n     *     this run.\n     */\n    async run(args) {\n        args ??= this._getArgs();\n        // Remember the args for potential future automatic runs.\n        // TODO (justinfagnani): add test\n        this._previousArgs = args;\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort();\n        }\n        else {\n            // Clear the last complete task run in INITIAL because it may be a resolved\n            // promise. Also clear if COMPLETE or ERROR because the value returned by\n            // awaiting taskComplete may have changed since last run.\n            this._taskComplete = undefined;\n            this._resolveTaskComplete = undefined;\n            this._rejectTaskComplete = undefined;\n        }\n        this.status = TaskStatus.PENDING;\n        let result;\n        let error;\n        // Request an update to report pending state.\n        if (this.autoRun === 'afterUpdate') {\n            // Avoids a change-in-update warning\n            queueMicrotask(() => this._host.requestUpdate());\n        }\n        else {\n            this._host.requestUpdate();\n        }\n        const key = ++this._callId;\n        this._abortController = new AbortController();\n        let errored = false;\n        try {\n            result = await this._task(args, { signal: this._abortController.signal });\n        }\n        catch (e) {\n            errored = true;\n            error = e;\n        }\n        // If this is the most recent task call, process this value.\n        if (this._callId === key) {\n            if (result === initialState) {\n                this.status = TaskStatus.INITIAL;\n            }\n            else {\n                if (errored === false) {\n                    try {\n                        this._onComplete?.(result);\n                    }\n                    catch {\n                        // Ignore user errors from onComplete.\n                    }\n                    this.status = TaskStatus.COMPLETE;\n                    this._resolveTaskComplete?.(result);\n                }\n                else {\n                    try {\n                        this._onError?.(error);\n                    }\n                    catch {\n                        // Ignore user errors from onError.\n                    }\n                    this.status = TaskStatus.ERROR;\n                    this._rejectTaskComplete?.(error);\n                }\n                this._value = result;\n                this._error = error;\n            }\n            // Request an update with the final value.\n            this._host.requestUpdate();\n        }\n    }\n    /**\n     * Aborts the currently pending task run by aborting the AbortSignal\n     * passed to the task function.\n     *\n     * Aborting a task does nothing if the task is not running: ie, in the\n     * complete, error, or initial states.\n     *\n     * Aborting a task does not automatically cancel the task function. The task\n     * function must be written to accept the AbortSignal and either forward it\n     * to other APIs like `fetch()`, or handle cancellation manually by using\n     * [`signal.throwIfAborted()`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/throwIfAborted}\n     * or the\n     * [`abort`]{@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_event}\n     * event.\n     *\n     * @param reason The reason for aborting. Passed to\n     *     `AbortController.abort()`.\n     */\n    abort(reason) {\n        if (this.status === TaskStatus.PENDING) {\n            this._abortController?.abort(reason);\n        }\n    }\n    /**\n     * The result of the previous task run, if it resolved.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run errored.\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * The error from the previous task run, if it rejected.\n     *\n     * Is `undefined` if the task has not run yet, or if the previous run\n     * completed successfully.\n     */\n    get error() {\n        return this._error;\n    }\n    render(renderer) {\n        switch (this.status) {\n            case TaskStatus.INITIAL:\n                return renderer.initial?.();\n            case TaskStatus.PENDING:\n                return renderer.pending?.();\n            case TaskStatus.COMPLETE:\n                return renderer.complete?.(this.value);\n            case TaskStatus.ERROR:\n                return renderer.error?.(this.error);\n            default:\n                throw new Error(`Unexpected status: ${this.status}`);\n        }\n    }\n}\nexport const shallowArrayEquals = (oldArgs, newArgs) => oldArgs === newArgs ||\n    (oldArgs.length === newArgs.length &&\n        oldArgs.every((v, i) => !notEqual(v, newArgs[i])));\n//# sourceMappingURL=task.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const PartType = {\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6,\n};\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive = (c) => (...values) => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n});\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport class Directive {\n    constructor(_partInfo) { }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    /** @internal */\n    _$initialize(part, parent, attributeIndex) {\n        this.__part = part;\n        this._$parent = parent;\n        this.__attributeIndex = attributeIndex;\n    }\n    /** @internal */\n    _$resolve(part, props) {\n        return this.update(part, props);\n    }\n    update(_part, props) {\n        return this.render(...props);\n    }\n}\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        this._value = nothing;\n        if (partInfo.type !== PartType.CHILD) {\n            throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n        }\n    }\n    render(value) {\n        if (value === nothing || value == null) {\n            this._templateResult = undefined;\n            return (this._value = value);\n        }\n        if (value === noChange) {\n            return value;\n        }\n        if (typeof value != 'string') {\n            throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n        }\n        if (value === this._value) {\n            return this._templateResult;\n        }\n        this._value = value;\n        const strings = [value];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        strings.raw = strings;\n        // WARNING: impersonating a TemplateResult like this is extremely\n        // dangerous. Third-party directives should not do this.\n        return (this._templateResult = {\n            // Cast to a known set of integers that satisfy ResultType so that we\n            // don't have to export ResultType and possibly encourage this pattern.\n            // This property needs to remain unminified.\n            ['_$litType$']: this.constructor\n                .resultType,\n            strings,\n            values: [],\n        });\n    }\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n//# sourceMappingURL=unsafe-html.js.map","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","import { Task } from '@lit/task'\nimport { LitElement, html, css, unsafeCSS } from 'lit'\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js'\nimport { openDB } from 'idb'\nimport closeIcon from '../../icons/close_FILL0_wght400_GRAD0_opsz24.svg?raw'\nimport bibAvisStyles from './bib-avis.scss?inline'\n\nfunction isEmpty(node) {\n  return node.textContent.trim() === \"\"\n}\n\nasync function hash(obj) {\n  const utf8 = new TextEncoder().encode(JSON.stringify(obj))\n  const hashBuffer = await crypto.subtle.digest('SHA-256', utf8)\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  const hashHex = hashArray\n    .map((bytes) => bytes.toString(16).padStart(2, '0'))\n    .join('')\n  return hashHex\n}\n\n/**\n * Un avis\n * Affiche un avis\n */\nexport class BibAvis extends LitElement {\n  static properties = {\n    service: {\n      type: String\n    },\n    contexte: {\n      type: String,\n      default: 'site-web'\n    },\n    niveau: {\n      type: String\n    },\n    boutonFermer: {\n      type: Boolean,\n      attribute: 'bouton-fermer'\n    },\n    message: {\n      state: true\n    }\n  }\n\n  static styles = [\n    css`${unsafeCSS(bibAvisStyles)}`,\n    css`\n    `\n  ]\n\n  #avis\n  #db\n\n  constructor() {\n    super()\n\n    this.#avis = null\n    this.service = 'https://avis.bib.umontreal.ca'\n    this.contexte = 'site-web-dev'\n    this.niveau = 'important'\n    this.boutonFermer = false\n  }\n\n  #getAvis() {\n    return new Task(this, {\n      task: async ([service, contexte, niveau], { signal }) => {\n        console.log('[#getAvis] is empty? %o', isEmpty(this))\n\n        const doGetAvis = new Promise(async (resolve, reject) => {\n          if (!isEmpty(this)) {\n            return resolve({ isLocal: true, message: this.innerHTML.split(/<!--\\?lit\\$\\d+\\$-->/).join('') })\n          }\n\n          const url = new URL(`${contexte}/${niveau}`, service)\n          const response = await fetch(url, {\n            headers: {\n              \"Accept\": \"application/json\",\n              // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            signal\n          })\n\n          if (!response.ok) {\n            return reject(new Error(response.status))\n          }\n\n          const { message } = await response.json()\n\n          resolve({ isLocal: false, message })\n        })\n\n        try {\n          const data = await doGetAvis\n          console.log('data: %o', data)\n          await this.#processAvis(data)\n        } catch (error) {\n          console.error('[#getAvis] An error occured: %o', error)\n        }\n\n        return data\n      },\n      args: () => [this.service, this.contexte, this.niveau]\n    })\n  }\n\n  async #processAvis(avis) {\n    if (!avis.message) {\n      this.setMessage(null)\n      return\n    }\n\n    if (!('indexedDB' in window)) {\n      this.setMessage(avis.message)\n      return\n    }\n\n    const db = this.#db = await openDB('@bibudem/ui', 1, {\n      upgrade(db) {\n        // Checks if the object store exists:\n        if (!db.objectStoreNames.contains('avis')) {\n          db.createObjectStore('avis', { keyPath: 'id' })\n        }\n      }\n    })\n\n    try {\n      const id = await hash(avis)\n      const storedAvis = await db.get('avis', id)\n      console.log('storedAvis: ', storedAvis)\n      if (storedAvis) {\n        if (!storedAvis.hidden) {\n          // Delete old entries\n          await db.delete('avis', id)\n          this.#show(storedAvis)\n        }\n      } else {\n        this.#show(avis)\n      }\n    } catch (error) {\n      console.error('Something went wrong with indexedDB: %o', error)\n      this.setMessage(avis.message)\n    }\n  }\n\n  async #show(avis) {\n    this.setMessage(avis)\n    if (this.#db) {\n      const id = await hash(avis)\n      await this.#db.add('avis', { ...avis, hidden: false }, id)\n    }\n  }\n\n  async #hide() {\n    const id = await hash(this.#avis)\n    await this.#db.put('avis', { ...this.#avis, hidden: true }, id)\n    this.#avis = null\n    this.requestUpdate()\n  }\n\n  connectedCallback() {\n    super.connectedCallback()\n    this.#getAvis()\n  }\n\n  #onBtnFermerClick() {\n    this.#hide()\n  }\n\n  _renderBoutonFermer() {\n    return this.boutonFermer ? html`<button class=\"btn-close\" aria-label=\"Fermer\" @click=\"${this.#onBtnFermerClick}\">${unsafeHTML(closeIcon)}</button>` : null\n  }\n\n  _avisTask = new Task(this, {\n    task: async ([service, contexte, niveau], { signal }) => {\n      const url = new URL(`${contexte}/${niveau}`, service)\n      const response = await fetch(url, {\n        headers: {\n          \"Accept\": \"application/json\",\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        signal\n      })\n      if (!response.ok) {\n        throw new Error(response.status)\n      }\n      return response.json()\n    },\n    args: () => [this.service, this.contexte, this.niveau]\n  })\n\n  // _renderRemote() {\n  //   return this._avisTask.render({\n  //     pending: () => html``,\n  //     complete: (avis) => this._renderAvis(avis.message),\n  //     error: e => {\n  //       console.error('An error occured while rendering _avisTask: %o', e)\n  //       return null\n  //     }\n  //   })\n  // }\n\n  render() {\n    return this.#avis?.message ? html`<aside class=\"container\"><div class=\"inner\"><div class=\"message\">${unsafeHTML(this.#avis.message)}</div>${this._renderBoutonFermer()}</div></aside>` : null\n  }\n\n  setMessage(message) {\n    this.#avis = typeof message === 'string' ? { message, isLocal: true } : message\n  }\n}\n\ncustomElements.define('bib-avis', BibAvis)","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"24\\\" viewBox=\\\"0 -960 960 960\\\" width=\\\"24\\\"><path d=\\\"M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z\\\"/></svg>\""],"names":["initialState","Symbol","Task","taskComplete","this","_taskComplete","status","Promise","res","rej","_resolveTaskComplete","_rejectTaskComplete","reject","_error","resolve","_value","constructor","host","task","args","_callId","_host","addController","taskConfig","_task","_argsFn","_argsEqual","argsEqual","shallowArrayEquals","_onComplete","onComplete","_onError","onError","autoRun","initialValue","_previousArgs","_getArgs","hostUpdate","_performTask","hostUpdated","undefined","Array","isArray","Error","prev","run","result","error","_abortController","abort","queueMicrotask","requestUpdate","key","AbortController","errored","signal","e","reason","value","render","renderer","initial","pending","complete","oldArgs","newArgs","length","every","v","i","notEqual","Directive","_partInfo","_$isConnected","_$parent","_$initialize","part","parent","attributeIndex","__part","__attributeIndex","_$resolve","props","update","_part","UnsafeHTMLDirective","partInfo","super","nothing","type","directiveName","_templateResult","noChange","strings","raw","_$litType$","resultType","values","unsafeHTML","c","_$litDirective$","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","transactionDoneMap","WeakMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","set","has","replaceTraps","callback","IDBRequest","request","promise","unlisten","removeEventListener","success","addEventListener","newValue","func","IDBCursor","prototype","advance","continue","continuePrimaryKey","includes","apply","unwrap","tx","done","DOMException","IDBDatabase","IDBObjectStore","IDBIndex","Proxy","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","transaction","store","index","shift","all","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","openCursor","proxiedCursor","delete","isIteratorProp","asyncIterator","isEmpty","node","textContent","trim","hash","obj","utf8","TextEncoder","encode","JSON","stringify","hashBuffer","crypto","subtle","digest","from","Uint8Array","map","bytes","toString","padStart","join","BibAvis","LitElement","__privateAdd","_s","processAvis","show","_n","_o","avis","db","_avisTask","service","contexte","niveau","url","URL","response","fetch","headers","Accept","ok","json","boutonFermer","connectedCallback","getAvis","_renderBoutonFermer","html","onBtnFermerClick","message","setMessage","isLocal","WeakSet","s_fn","console","log","doGetAvis","innerHTML","split","r","data","window","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","then","catch","contains","createObjectStore","keyPath","id","storedAvis","hidden","add","n_fn","hide","put","o_fn","static","String","default","Boolean","attribute","state","css","unsafeCSS","customElements","define"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}