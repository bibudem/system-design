{"version":3,"file":"unsafe-html-CYDD8bFW.js","sources":["../node_modules/lit-html/development/directive.js","../node_modules/lit-html/development/directives/unsafe-html.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const PartType = {\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6,\n};\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive = (c) => (...values) => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n});\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport class Directive {\n    constructor(_partInfo) { }\n    // See comment in Disconnectable interface for why this is a getter\n    get _$isConnected() {\n        return this._$parent._$isConnected;\n    }\n    /** @internal */\n    _$initialize(part, parent, attributeIndex) {\n        this.__part = part;\n        this._$parent = parent;\n        this.__attributeIndex = attributeIndex;\n    }\n    /** @internal */\n    _$resolve(part, props) {\n        return this.update(part, props);\n    }\n    update(_part, props) {\n        return this.render(...props);\n    }\n}\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        this._value = nothing;\n        if (partInfo.type !== PartType.CHILD) {\n            throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n        }\n    }\n    render(value) {\n        if (value === nothing || value == null) {\n            this._templateResult = undefined;\n            return (this._value = value);\n        }\n        if (value === noChange) {\n            return value;\n        }\n        if (typeof value != 'string') {\n            throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n        }\n        if (value === this._value) {\n            return this._templateResult;\n        }\n        this._value = value;\n        const strings = [value];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        strings.raw = strings;\n        // WARNING: impersonating a TemplateResult like this is extremely\n        // dangerous. Third-party directives should not do this.\n        return (this._templateResult = {\n            // Cast to a known set of integers that satisfy ResultType so that we\n            // don't have to export ResultType and possibly encourage this pattern.\n            // This property needs to remain unminified.\n            ['_$litType$']: this.constructor\n                .resultType,\n            strings,\n            values: [],\n        });\n    }\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n//# sourceMappingURL=unsafe-html.js.map"],"names":["PartType","ATTRIBUTE","CHILD","PROPERTY","BOOLEAN_ATTRIBUTE","EVENT","ELEMENT","directive","c","values","_$litDirective$","Directive","_partInfo","_$isConnected","this","_$parent","part","parent","attributeIndex","__part","__attributeIndex","props","update","_part","render","UnsafeHTMLDirective","partInfo","super","_value","nothing","type","Error","constructor","directiveName","value","_templateResult","noChange","strings","raw","_$litType$","resultType","unsafeHTML"],"mappings":";;;;;;AAKY,MAACA,IAAW,EACpBC,WAAW,GACXC,OAAO,GACPC,UAAU,GACVC,mBAAmB,GACnBC,OAAO,GACPC,SAAS,EAMAC,GAAAA,IAAaC,CAAAA,OAAM,IAAIC,QAAY,EAE5CC,iBAAqBF,IACrBC;AAOG,MAAME,EAAAA;AAAAA,EACT,YAAYC,IAAc;AAAA,EAAA;AAAA,EAE1B,IAAIC,gBAAAA;AACA,WAAOC,KAAKC,SAASF;AAAAA,EACxB;AAAA,EAED,aAAaG,IAAMC,IAAQC;AACvBJ,SAAKK,SAASH,IACdF,KAAKC,WAAWE,IAChBH,KAAKM,mBAAmBF;AAAAA,EAC3B;AAAA,EAED,UAAUF,IAAMK,IACZ;AAAA,WAAOP,KAAKQ,OAAON,IAAMK,EAC5B;AAAA,EAAA;AAAA,EACD,OAAOE,IAAOF,IAAAA;AACV,WAAOP,KAAKU,UAAUH,EACzB;AAAA,EAAA;AAAA;;;;;;ACrCE,MAAMI,UAA4Bd;EACrC,YAAYe;AAGR,QAFAC,MAAMD,KACNZ,KAAKc,SAASC,GACVH,GAASI,SAAS9B,EAASE;AAC3B,YAAM,IAAI6B,MAAM,GAAGjB,KAAKkB,YAAYC,aAAAA,uCAAAA;AAAAA,EAE3C;AAAA,EACD,OAAOC;AACH,QAAIA,OAAUL,KAAoB,QAATK;AAErB,aADApB,KAAKqB,kBAAAA,QACGrB,KAAKc,SAASM;AAE1B,QAAIA,OAAUE;AACV,aAAOF;AAEX,QAAoB,YAAA,OAATA;AACP,YAAM,IAAIH,MAAM,GAAGjB,KAAKkB,YAAYC,aAAAA,mCAAAA;AAExC,QAAIC,OAAUpB,KAAKc;AACf,aAAOd,KAAKqB;AAEhBrB,SAAKc,SAASM;AACd,UAAMG,KAAU,CAACH,EAKjB;AAAA,WAHAG,GAAQC,MAAMD,IAGNvB,KAAKqB,kBAAkB,EAI3BI,YAAgBzB,KAAKkB,YAChBQ,YACLH,SACA5B,IAAAA,QAAQ;EAEf;AAELgB;AAAAA,EAAoBQ,gBAAgB,cACpCR,EAAoBe,aAzCA;AAoDR,MAACC,IAAalC,EAAUkB,CAAAA;","x_google_ignoreList":[0,1]}